/*
	Author:mateusz.gospodarczyk@uniroma2.it
*/

#ifndef ReRefOutput_H_
#define ReRefOutput_H_

//#include "GAM.h"
#include "GCRTemplate.h"
#include "WaveformInterface.h"
#include "GCReferenceContainer.h"
#include "PseudoDerivator.h"
#include <math.h>

inline float MAX(float a, float b) {
    return a > b ? a : b;
}

inline float MIN(float a, float b) {
    return a < b ? a : b;
}



OBJECT_DLL(ReRef)
class ReRef : public GCReferenceContainer {
    OBJECT_DLL_STUFF(ReRef)
    // Parameters
private:


	GCRTemplate<PseudoDerivator> pseudoDerivator;
	int32 ipl_sign;
    float t_end;
    float dIp;
    
    float activate;
	float samplingTime;
    
    float cq_minIPL;// 40E3;   // always in abs value
	float cq_dIpl_threshold   ;// -1.1E7;
	float cq_counterThreshold ;// 3E-3/cq.deltaT; //3ms
    float cq_detect_output;
    
    
	// pwm parameter
	int32 pwm_enable_block;//   ;// 0;
	float pwm_amp;//            ;// 0.5E4;                // pwm amplitude
	float pwm_period;//         ;// 0.01;                 // 10ms
	float pwm_delay_activate;// ;// 0.005;                // delay of the pwm activation after plateaus detection
	float pwm_duty_cycle;//     ;// 0.5;                  // 50//
    float pwmTime;
    //output
    float enable_pwm;
    float deltaIpOut_pwm;
    
	// chase of ipl_ref when abs(ipl-ipl_ref)>;//threshold_ipl_drift_apart
	float trigger_threshold_ipl_time_fall_apart  ;// 0.1;
	float trigger_threshold_ipl_drift_apart      ;// 1e6;     //if this has to be really used the threshold_vloop MUST be very large 1e6 
	float trigger_gamma_ipl_chase                ;// 1;
	float trigger_enable_trigger_chase_ipl    ;// 1;
	float trigger_delay_activate_ipl_chase       ;// 0.01;
	float trigger_delay_activate_ipl_cq          ;// 0.02;
	float trigger_threshold_vloop                ;// 2.5;     //E6; //if this has to be really used the threshold_ipl_drift_apart MUST be very large 1e6 
	float trigger_dipl_chase_threshold           ;// 1E7;
	float trigger_gamma_ipl_chase_vloop_mhd      ;// 0.1;   
	float trigger_threshold_ipl_vloop_activation ;// 2E4;     // if (ipl-ipl_ref) < threshold_ipl_vloop_activation then enable chase_vloop_mhd
    float newipla_error;
    
    
   //new ref for ire current
    float reref_beta;						// = 0.9;     % exponential decay rate
    float reref_alpha;						// = 0.9;     % exponential decay rate
	float reref_deltaTdes;				// = 0.2;     % 300ms    
	float reref_enableMultiplePlateau;	// = 1;  	  % enable multiple plateau    
 	//shift the straight line of the new ipref
	float reref_threshold_time_newiref;	//= 0.02;     %200ms
	float reref_percent_upgain_newiref;	//= 0.1;   	  % if the (ipl current - newIreftpl) >= 0 then  increase Iref_linear of 5%
	float reref_enableUpdateRefUp;		//= 0.0;      %old version 
    float iref_output;
    
    //
    float deltaIpl;
  	float waitTime_pwm;
  	float enable_square;
  	float plateauDetectOld_pwm;
  	float startTime_pwm;
    float newDelta;
    float enable_delta_ref  	
    //
  	float startDetection;
    //
    float enableCurrentDecay;
	float Iptpl;
	float tpl;
	float Ireftpl;
	float counter;
	//
	
	float waitTime;
	float enableChase;
	float plateauDetectOld;
	float startTime;    
	float waitTimeChase;
	
	float statusChangeNewIref;
    float enable_delta_ref;
	float enable_ire_ref;
	
	
	
    
public:

    ReRef() {
        
		square_wave_init();
    	ire_ref_init();
    	ire_delta_ref_init();
    	cq_detect_init();
    
    }
    
    	void square_wave_init()
		{
		
		  waitTime_pwm = 0.0;
		  enable_square = 0.0;
		  plateauDetectOld_pwm = 0.0;
		  startTime_pwm = 0.0;
		}
		
		void ire_ref_init()
		{
		  enableCurrentDecay = 0.0;
		  Iptpl = 0.0;
		  tpl = 0.0;
		  Ireftpl = 0.0;
		  counter = 0.0;
		}
		
		void ire_delta_ref_init()
		{
		  deltaIpl = 0.0;
		  waitTime = 0.0;
		  enableChase = 0.0;
		  plateauDetectOld = 0.0;
		  waitTimeChase = 0.0;
		}
		
		void cq_detect_init()
		{
		  startDetection = 0.0;
		}

    ~ReRef() {
    }
    
    	// new algorithm for current quench and plateau detection
		void cq_detect(float ipl);
		
		//square wave for pwm
		void square_wave(int32 time, float ipl_ref, float  ipl_ref_new);
    
      	// ire delta_ref 
	  	void ire_delta_ref( time, float vloop, float ipl, float ipl_ref_new);
    
      	//ire_ref
      	void ire_ref(float time, float ipl, float ipl_ref);
        
        //main function
        float new_re_ref(float time, float ipl, float ipl_ref, float vloop);
        

};
#endif
